# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from sshlatentslave import SSHLatentBuildSlave
import secrets

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
class DoCSSH(SSHLatentBuildSlave):
    def __init__(self, name):
        SSHLatentBuildSlave.__init__(self, name, secrets.sshslavepass,
            name + '.doc.ic.ac.uk', 'tw1509',
            'cd /vol/rr/jscert/build-slaves && source sandbox/bin/activate && buildslave {cmd} {name}',
            build_wait_timeout=-1)

c['slaves'] = [
    DoCSSH('baobab'),
    #DoCSSH('tui'),
    #DoCSSH('potoo01'),
    #DoCSSH('potoo02')
]

docslavenames = ['baobab']

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.PBChangeSource(user=secrets.pbcs_user,passwd=secrets.pbcs_pass))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

# Initial sources
c['schedulers'].append(schedulers.AnyBranchScheduler(
                            name='all branches',
                            builderNames=['quick-build']))
c['schedulers'].append(schedulers.ForceScheduler(
                            name='force',
                            builderNames=['quick-build']))

# Second stage
#c['schedulers'].append(schedulers.Triggerable(
#                            name='distributed-test',
#                            builderNames=['distributed-test']))
#c['schedulers'].append(schedulers.Triggerable(
#                            name='slow-build',
#                            builderNames=['slow-build']))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

quickBuildFactory = util.BuildFactory([
    steps.Git(repourl=util.Property('repository', 'git@github.com:resource-reasoning/jscert_dev.git'),
              mode='full', method='fresh'),
    steps.ShellCommand(command=['make','init'], description=['initializing'], descriptionDone=['initialized'], haltOnFailure=True),
    steps.ShellCommand(command=['make'], description=['building'], descriptionDone=['built'], haltOnFailure=True),
#    steps.ShellCommand(command=['make','smoketest']),
#    steps. Package it up?
#    steps.Trigger(schedulerNames=['distributed-test','slow-build'])
])

c['builders'] = [
    util.BuilderConfig(name='quick-build', slavenames=docslavenames, factory=quickBuildFactory),
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(secrets.users),
    gracefulShutdown = 'auth',
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
    pauseSlave = 'auth',
    showUsersPage = 'auth',
)
c['status'].append(html.WebStatus(http_port=55080, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "JSCert"
c['titleURL'] = "https://github.com/resource-reasoning/jscert-dev"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://146.169.46.217:55080/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

